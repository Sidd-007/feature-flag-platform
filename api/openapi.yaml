openapi: 3.0.3
info:
  title: Feature Flag & Experimentation Platform API
  description: |
    Production-grade feature flag and experimentation platform API.

    This API provides endpoints for:
    - Organization, project, and environment management
    - Feature flag creation and management
    - User targeting and segmentation
    - A/B testing and experimentation
    - Analytics and results

    ## Authentication

    The API supports multiple authentication methods:
    - **Bearer Token**: JWT tokens for user sessions
    - **API Key**: API keys for programmatic access
    - **OIDC**: OpenID Connect for SSO integration

    ## Rate Limiting

    API endpoints are rate limited based on authentication:
    - User tokens: 1000 requests/minute
    - API keys: 10000 requests/minute
    - Anonymous: 100 requests/minute

  version: 1.0.0
  contact:
    name: Feature Flag Platform Team
    url: https://github.com/Sidd-007/feature-flag-platform
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/v1
    description: Local development server
  - url: https://api.feature-flags.dev/v1
    description: Development environment
  - url: https://api.feature-flags.com/v1
    description: Production environment

security:
  - BearerAuth: []
  - ApiKeyAuth: []

paths:
  # Health and status endpoints
  /health:
    get:
      summary: Health check
      description: Returns the health status of the API
      tags: [Health]
      security: []
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"

  # Authentication endpoints
  /auth/login:
    post:
      summary: User login
      description: Authenticate user with email and password
      tags: [Authentication]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /auth/refresh:
    post:
      summary: Refresh token
      description: Refresh an expired JWT token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshRequest"
      responses:
        "200":
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"

  # Organization endpoints
  /orgs:
    get:
      summary: List organizations
      description: Get all organizations the user has access to
      tags: [Organizations]
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/LimitParam"
      responses:
        "200":
          description: Organizations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Organization"
                  pagination:
                    $ref: "#/components/schemas/Pagination"

    post:
      summary: Create organization
      description: Create a new organization
      tags: [Organizations]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrganizationRequest"
      responses:
        "201":
          description: Organization created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/Conflict"

  /orgs/{orgId}:
    parameters:
      - $ref: "#/components/parameters/OrgIdParam"

    get:
      summary: Get organization
      description: Get organization details
      tags: [Organizations]
      responses:
        "200":
          description: Organization retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "404":
          $ref: "#/components/responses/NotFound"

    put:
      summary: Update organization
      description: Update organization details
      tags: [Organizations]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrganizationRequest"
      responses:
        "200":
          description: Organization updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "404":
          $ref: "#/components/responses/NotFound"

    delete:
      summary: Delete organization
      description: Delete an organization (owner only)
      tags: [Organizations]
      responses:
        "204":
          description: Organization deleted successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"

  # Project endpoints
  /orgs/{orgId}/projects:
    parameters:
      - $ref: "#/components/parameters/OrgIdParam"

    get:
      summary: List projects
      description: Get all projects in an organization
      tags: [Projects]
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/LimitParam"
      responses:
        "200":
          description: Projects retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Project"
                  pagination:
                    $ref: "#/components/schemas/Pagination"

    post:
      summary: Create project
      description: Create a new project
      tags: [Projects]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProjectRequest"
      responses:
        "201":
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"

  /orgs/{orgId}/projects/{projectId}:
    parameters:
      - $ref: "#/components/parameters/OrgIdParam"
      - $ref: "#/components/parameters/ProjectIdParam"

    get:
      summary: Get project
      description: Get project details
      tags: [Projects]
      responses:
        "200":
          description: Project retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"

    put:
      summary: Update project
      description: Update project details
      tags: [Projects]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProjectRequest"
      responses:
        "200":
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"

    delete:
      summary: Delete project
      description: Delete a project
      tags: [Projects]
      responses:
        "204":
          description: Project deleted successfully

  # Environment endpoints
  /orgs/{orgId}/projects/{projectId}/environments:
    parameters:
      - $ref: "#/components/parameters/OrgIdParam"
      - $ref: "#/components/parameters/ProjectIdParam"

    get:
      summary: List environments
      description: Get all environments in a project
      tags: [Environments]
      responses:
        "200":
          description: Environments retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Environment"

    post:
      summary: Create environment
      description: Create a new environment
      tags: [Environments]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEnvironmentRequest"
      responses:
        "201":
          description: Environment created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Environment"

  # Feature Flag endpoints
  /orgs/{orgId}/projects/{projectId}/environments/{envId}/flags:
    parameters:
      - $ref: "#/components/parameters/OrgIdParam"
      - $ref: "#/components/parameters/ProjectIdParam"
      - $ref: "#/components/parameters/EnvIdParam"

    get:
      summary: List flags
      description: Get all feature flags in an environment
      tags: [Flags]
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/LimitParam"
        - name: status
          in: query
          description: Filter by flag status
          schema:
            type: string
            enum: [active, archived]
      responses:
        "200":
          description: Flags retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Flag"
                  pagination:
                    $ref: "#/components/schemas/Pagination"

    post:
      summary: Create flag
      description: Create a new feature flag
      tags: [Flags]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateFlagRequest"
      responses:
        "201":
          description: Flag created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Flag"

  /orgs/{orgId}/projects/{projectId}/environments/{envId}/flags/{flagKey}:
    parameters:
      - $ref: "#/components/parameters/OrgIdParam"
      - $ref: "#/components/parameters/ProjectIdParam"
      - $ref: "#/components/parameters/EnvIdParam"
      - $ref: "#/components/parameters/FlagKeyParam"

    get:
      summary: Get flag
      description: Get feature flag details
      tags: [Flags]
      responses:
        "200":
          description: Flag retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Flag"

    put:
      summary: Update flag
      description: Update feature flag
      tags: [Flags]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateFlagRequest"
      responses:
        "200":
          description: Flag updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Flag"

    delete:
      summary: Delete flag
      description: Delete feature flag
      tags: [Flags]
      responses:
        "204":
          description: Flag deleted successfully

  /orgs/{orgId}/projects/{projectId}/environments/{envId}/flags/{flagKey}/publish:
    parameters:
      - $ref: "#/components/parameters/OrgIdParam"
      - $ref: "#/components/parameters/ProjectIdParam"
      - $ref: "#/components/parameters/EnvIdParam"
      - $ref: "#/components/parameters/FlagKeyParam"

    post:
      summary: Publish flag
      description: Publish flag configuration to edge nodes
      tags: [Flags]
      responses:
        "200":
          description: Flag published successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublishResponse"

  # Edge Evaluator endpoints (different service)
  /evaluate:
    post:
      summary: Evaluate flags
      description: Evaluate feature flags for a user context
      tags: [Evaluation]
      servers:
        - url: http://localhost:8081
          description: Edge Evaluator service
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EvaluationRequest"
      responses:
        "200":
          description: Flags evaluated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluationResponse"

  # Event Ingestor endpoints (different service)
  /events/exposure:
    post:
      summary: Track exposure events
      description: Track flag exposure events
      tags: [Events]
      servers:
        - url: http://localhost:8082
          description: Event Ingestor service
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExposureEventBatch"
      responses:
        "202":
          description: Events accepted for processing

  /events/metrics:
    post:
      summary: Track metric events
      description: Track custom metric events
      tags: [Events]
      servers:
        - url: http://localhost:8082
          description: Event Ingestor service
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetricEventBatch"
      responses:
        "202":
          description: Events accepted for processing

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Use "Bearer <api-key>" format

  parameters:
    OrgIdParam:
      name: orgId
      in: path
      required: true
      description: Organization ID
      schema:
        type: string
        format: uuid

    ProjectIdParam:
      name: projectId
      in: path
      required: true
      description: Project ID
      schema:
        type: string
        format: uuid

    EnvIdParam:
      name: envId
      in: path
      required: true
      description: Environment ID
      schema:
        type: string
        format: uuid

    FlagKeyParam:
      name: flagKey
      in: path
      required: true
      description: Flag key
      schema:
        type: string
        pattern: "^[a-zA-Z0-9_-]+$"

    PageParam:
      name: page
      in: query
      description: Page number (1-based)
      schema:
        type: integer
        minimum: 1
        default: 1

    LimitParam:
      name: limit
      in: query
      description: Number of items per page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Conflict:
      description: Resource already exists
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

  schemas:
    # Common schemas
    Error:
      type: object
      required: [error, message]
      properties:
        error:
          type: string
          description: Error code
        message:
          type: string
          description: Human-readable error message
        details:
          type: object
          description: Additional error details
        correlation_id:
          type: string
          description: Request correlation ID

    Pagination:
      type: object
      required: [page, limit, total, pages]
      properties:
        page:
          type: integer
          description: Current page number
        limit:
          type: integer
          description: Items per page
        total:
          type: integer
          description: Total number of items
        pages:
          type: integer
          description: Total number of pages

    HealthResponse:
      type: object
      required: [status, timestamp]
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
        timestamp:
          type: string
          format: date-time
        version:
          type: string
        dependencies:
          type: object
          additionalProperties:
            type: string

    # Authentication schemas
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8

    LoginResponse:
      type: object
      required: [access_token, token_type, expires_in]
      properties:
        access_token:
          type: string
          description: JWT access token
        token_type:
          type: string
          enum: [Bearer]
        expires_in:
          type: integer
          description: Token expiry in seconds
        refresh_token:
          type: string
          description: Refresh token
        user:
          $ref: "#/components/schemas/User"

    RefreshRequest:
      type: object
      required: [refresh_token]
      properties:
        refresh_token:
          type: string

    # Core entity schemas
    Organization:
      type: object
      required: [id, name, slug, billing_tier, created_at, updated_at]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 255
        slug:
          type: string
          pattern: "^[a-z0-9-]+$"
          maxLength: 100
        billing_tier:
          type: string
          enum: [free, pro, enterprise]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        version:
          type: integer

    Project:
      type: object
      required: [id, org_id, name, key, created_at, updated_at]
      properties:
        id:
          type: string
          format: uuid
        org_id:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 255
        key:
          type: string
          pattern: "^[a-zA-Z0-9_-]+$"
          maxLength: 100
        description:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        version:
          type: integer

    Environment:
      type: object
      required: [id, project_id, name, key, is_prod, created_at, updated_at]
      properties:
        id:
          type: string
          format: uuid
        project_id:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 255
        key:
          type: string
          pattern: "^[a-zA-Z0-9_-]+$"
          maxLength: 100
        is_prod:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        version:
          type: integer

    Flag:
      type: object
      required:
        [id, env_id, key, name, type, variations, default_variation, status]
      properties:
        id:
          type: string
          format: uuid
        env_id:
          type: string
          format: uuid
        key:
          type: string
          pattern: "^[a-zA-Z0-9_-]+$"
        name:
          type: string
          maxLength: 255
        description:
          type: string
        type:
          type: string
          enum: [boolean, multivariate, json]
        variations:
          type: array
          items:
            $ref: "#/components/schemas/Variation"
        default_variation:
          type: string
        rules:
          type: object
          description: Targeting rules in JSON format
        status:
          type: string
          enum: [active, archived]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        version:
          type: integer

    Variation:
      type: object
      required: [key, name, value]
      properties:
        key:
          type: string
        name:
          type: string
        value:
          description: Variation value (type depends on flag type)
        description:
          type: string

    User:
      type: object
      required: [id, email, first_name, last_name]
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        is_active:
          type: boolean
        email_verified:
          type: boolean
        last_login_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time

    # Request schemas
    CreateOrganizationRequest:
      type: object
      required: [name, slug]
      properties:
        name:
          type: string
          maxLength: 255
        slug:
          type: string
          pattern: "^[a-z0-9-]+$"
          maxLength: 100

    UpdateOrganizationRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 255

    CreateProjectRequest:
      type: object
      required: [name, key]
      properties:
        name:
          type: string
          maxLength: 255
        key:
          type: string
          pattern: "^[a-zA-Z0-9_-]+$"
          maxLength: 100
        description:
          type: string

    UpdateProjectRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        description:
          type: string

    CreateEnvironmentRequest:
      type: object
      required: [name, key]
      properties:
        name:
          type: string
          maxLength: 255
        key:
          type: string
          pattern: "^[a-zA-Z0-9_-]+$"
          maxLength: 100
        is_prod:
          type: boolean
          default: false

    CreateFlagRequest:
      type: object
      required: [key, name, type, variations, default_variation]
      properties:
        key:
          type: string
          pattern: "^[a-zA-Z0-9_-]+$"
        name:
          type: string
          maxLength: 255
        description:
          type: string
        type:
          type: string
          enum: [boolean, multivariate, json]
        variations:
          type: array
          items:
            $ref: "#/components/schemas/Variation"
        default_variation:
          type: string
        rules:
          type: object
          description: Targeting rules in JSON format

    UpdateFlagRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        description:
          type: string
        variations:
          type: array
          items:
            $ref: "#/components/schemas/Variation"
        default_variation:
          type: string
        rules:
          type: object
          description: Targeting rules in JSON format
        status:
          type: string
          enum: [active, archived]

    PublishResponse:
      type: object
      required: [published_at, config_version]
      properties:
        published_at:
          type: string
          format: date-time
        config_version:
          type: integer
        message:
          type: string

    # Evaluation schemas
    EvaluationRequest:
      type: object
      required: [env_key, context]
      properties:
        env_key:
          type: string
        flag_keys:
          type: array
          items:
            type: string
          description: Specific flags to evaluate (if empty, evaluates all)
        context:
          $ref: "#/components/schemas/EvaluationContext"

    EvaluationContext:
      type: object
      required: [user_key]
      properties:
        user_key:
          type: string
        attributes:
          type: object
          additionalProperties: true
          description: User attributes for targeting

    EvaluationResponse:
      type: object
      required: [flags]
      properties:
        flags:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/EvaluationResult"
        config_version:
          type: integer

    EvaluationResult:
      type: object
      required: [variation_key, value, reason]
      properties:
        variation_key:
          type: string
        value:
          description: Variation value
        reason:
          type: string
        bucketing_id:
          type: string
        bucket:
          type: integer
        rule_id:
          type: string
        in_experiment:
          type: boolean
        experiment_key:
          type: string

    # Event schemas
    ExposureEventBatch:
      type: object
      required: [events]
      properties:
        events:
          type: array
          items:
            $ref: "#/components/schemas/ExposureEvent"

    ExposureEvent:
      type: object
      required: [flag_key, variation_key, user_key_hash]
      properties:
        flag_key:
          type: string
        variation_key:
          type: string
        user_key_hash:
          type: string
        bucketing_id:
          type: string
        experiment_key:
          type: string
        session_id:
          type: string
        context:
          type: object
        meta:
          type: object
        timestamp:
          type: string
          format: date-time

    MetricEventBatch:
      type: object
      required: [events]
      properties:
        events:
          type: array
          items:
            $ref: "#/components/schemas/MetricEvent"

    MetricEvent:
      type: object
      required: [metric_key, user_key_hash, value]
      properties:
        metric_key:
          type: string
        user_key_hash:
          type: string
        value:
          type: number
        unit:
          type: string
        context:
          type: object
        meta:
          type: object
        timestamp:
          type: string
          format: date-time

tags:
  - name: Health
    description: Health check endpoints
  - name: Authentication
    description: Authentication and authorization
  - name: Organizations
    description: Organization management
  - name: Projects
    description: Project management
  - name: Environments
    description: Environment management
  - name: Flags
    description: Feature flag management
  - name: Evaluation
    description: Flag evaluation (Edge service)
  - name: Events
    description: Event ingestion (Event service)
