version: '3.8'

services:
  # Databases
  postgres:
    image: postgres:15-alpine
    container_name: ff-postgres
    environment:
      POSTGRES_DB: feature_flags
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-postgres.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  clickhouse:
    image: clickhouse/clickhouse-server:23.8-alpine
    container_name: ff-clickhouse
    environment:
      CLICKHOUSE_DB: analytics
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: ""
    ports:
      - "8123:8123"  # HTTP interface
      - "9000:9000"  # Native interface
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./init-clickhouse.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: ff-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Message Broker
  nats:
    image: nats:2.10-alpine
    container_name: ff-nats
    ports:
      - "4222:4222"  # Client connections
      - "8222:8222"  # HTTP monitoring
      - "6222:6222"  # Routing port for clustering
    command: [
      "--jetstream",
      "--store_dir=/data"
    ]
    volumes:
      - nats_data:/data
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5

  # S3-compatible storage for development
  minio:
    image: minio/minio:latest
    container_name: ff-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9001:9001"  # Console
      - "9000:9000"  # API
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Feature Flag Platform Services
  control-plane:
    build:
      context: ..
      dockerfile: cmd/control-plane/Dockerfile
    container_name: ff-control-plane
    environment:
      - ENV=development
      - PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=feature_flags
      - DB_USER=postgres
      - DB_PASSWORD=password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NATS_URL=nats://nats:4222
      - JWT_SECRET=dev-secret-key-change-in-production
      - LOG_LEVEL=debug
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  edge-evaluator:
    build:
      context: ..
      dockerfile: cmd/edge-evaluator/Dockerfile
    container_name: ff-edge-evaluator
    environment:
      - ENV=development
      - PORT=8081
      - CONTROL_PLANE_URL=http://control-plane:8080
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NATS_URL=nats://nats:4222
      - LOG_LEVEL=debug
    ports:
      - "8081:8081"
    depends_on:
      control-plane:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  event-ingestor:
    build:
      context: ..
      dockerfile: cmd/event-ingestor/Dockerfile
    container_name: ff-event-ingestor
    environment:
      - ENV=development
      - PORT=8082
      - CLICKHOUSE_HOST=clickhouse
      - CLICKHOUSE_PORT=9000
      - CLICKHOUSE_DB=analytics
      - NATS_URL=nats://nats:4222
      - LOG_LEVEL=debug
    ports:
      - "8082:8082"
    depends_on:
      clickhouse:
        condition: service_healthy
      nats:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  analytics-engine:
    build:
      context: ..
      dockerfile: cmd/analytics-engine/Dockerfile
    container_name: ff-analytics-engine
    environment:
      - ENV=development
      - PORT=8083
      - CLICKHOUSE_HOST=clickhouse
      - CLICKHOUSE_PORT=9000
      - CLICKHOUSE_DB=analytics
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=feature_flags
      - DB_USER=postgres
      - DB_PASSWORD=password
      - LOG_LEVEL=debug
    ports:
      - "8083:8083"
    depends_on:
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Admin Web UI
  admin-ui:
    build:
      context: ../web/admin
      dockerfile: Dockerfile
    container_name: ff-admin-ui
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NODE_ENV=development
    ports:
      - "3000:3000"
    depends_on:
      control-plane:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  clickhouse_data:
  redis_data:
  nats_data:
  minio_data:

networks:
  default:
    name: feature-flags-network
